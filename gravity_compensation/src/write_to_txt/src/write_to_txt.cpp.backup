// Created by Deng-Xutian on 2020/9/22.
// Email address: dengxutian@126.com.

#include <string>
#include <iostream>
#include <fstream>
#include <stdio.h>
// #include "write_to_txt.h"
#include "ros/ros.h"
#include "geometry_msgs/WrenchStamped.h"
#include "sensor_msgs/Imu.h"
#include "std_msgs/Float64.h"

using namespace std;

string input_file_name(string dir_path)
{
    string file_name;
    string txt_path;
    cout << "Input the doc name of txt:" << endl;
    cin >> file_name;
    txt_path = dir_path + file_name + ".txt";
    return txt_path;
}

string int_to_string(int msg)
{
   stringstream ss;
   string str;
   ss << msg;
   ss >> str;
   return str;
}


string double_to_string(double msg)
{
   stringstream ss;
   string str;
   ss << msg;
   ss >> str;
   return str;
}

string force_value_to_str(geometry_msgs::WrenchStamped force_value)
{
    string space = " ";
    string result;
    result = double_to_string(force_value.wrench.force.x) + space + double_to_string(force_value.wrench.force.y) + space + double_to_string(force_value.wrench.force.z) + space + double_to_string(force_value.wrench.torque.x) + space + double_to_string(force_value.wrench.torque.y) + space + double_to_string(force_value.wrench.torque.z);
    return result;
}

string imu_value_to_str(geometry_msgs::Quaternion imu_value)
{
    string space = " ";
    string result;
    result = double_to_string(imu_value.x) + space +double_to_string(imu_value.y) + space + double_to_string(imu_value.z) + space +double_to_string(imu_value.w);
    return result;
}

class callback_function
{
public:

    void imu_callback_function(const geometry_msgs::Quaternion::ConstPtr& msg)
    {
        imu_value = *msg;
    }

    void force_callback_function(const geometry_msgs::WrenchStamped::ConstPtr& msg)
    {
        force_value = *msg;
    }

    geometry_msgs::WrenchStamped force_value;
    geometry_msgs::Quaternion imu_value;
    
};

int main(int argc, char **argv)
{
    ros::init(argc, argv, "writer");
    ros::NodeHandle nh;
    callback_function cb;
    ros::Subscriber sub_imu = nh.subscribe("/imu", 1, &callback_function::imu_callback_function, &cb);
    ros::Subscriber sub_force = nh.subscribe("/netft_data", 1, &callback_function::force_callback_function, &cb);

    string dir_path;
    string txt_path;
    string str;
    fstream file;
    ros::Rate loop_rate(10);

    dir_path = "/home/dxt/recorder/src/write_to_txt/doc/";
    txt_path = input_file_name(dir_path);
    cout << "Writing file:" << txt_path << endl;
    file.open(txt_path.c_str(), ios::out);

    while(ros::ok())
    {
        str = imu_value_to_str(cb.imu_value) + " " + force_value_to_str(cb.force_value);
        file << str << endl;
        ros::spinOnce();
        loop_rate.sleep();
    }
    file.close();
    return 0;
}